                                INTRODUCTION TO JAVASCRIPT

Java - programming language on its own - server side language
Javascript - 
    JS is a programming language designed to make web pages interactive and dynamic
-What do we use JS for?
1. User interactivity - a web page responding to user actions e.g clicking buttons, typing, scrolling, hovering e.t.c
2. Reactivity - making our web pages dynamic
 **dynamic - the page content is able to change by itself without reloading

JS can run in two environments:
1. In the browser - client side JS 
2. In the server - NodeJS

where can we write JavaScript?
-This depends on how much JS code you have to write

1. In a HTML document - head section -> if you want JS to run before html content
                      - in the body section -> right above the closing body tag
    - use script tag
2. As as external file - for large JS codebase 
  -create an external js file with a .js extension
  -link your external script to html using script src 


                  JS DATA TYPES
1.String - represent text 
2.Number - represents numeric values - both whole (integers) and floating (float) 19 , 20.65
3.Boolean - represents truth values - True and False

                  JS VARIABLES
- A variable is a named container used to store data / values
- how we declare variables in JS

You can use these keywords to declare variables:
1. let - modern way to declare variables in JS - values from let can be changed
2. const - for constants - values cant be changed
3. var - old way - works with old browsers  - not recommended -replaced by let - depracated

How to output in JS -> console.log()


    JS METHODS
1. STRINGS
2. NUMBERS
-Most of these methods are accessed using dot operator (.)

a) .length -> determine length of a string / no of characters in a string
b) .toUpperCase() - convert all chaaracters to upper case
c) .toLowerCase() - convert characters to lower case
d) .includes()
e) .indexOf()
f) .slice()
g) .replace()
h) .trim()
i) .split() - splits a string into an array
j) .charAt()
k) .startsWith()
l) .endsWith()
m) .concat()





Number Methods
.toFixed()
Math.round()
isNaN


N/B -  type casting + template literals

TASK 
- slide 53 
1.parseInt()
2.parseFloat()
3.Number.isInteger()
4.Math.floor()
5.Math.ceil()
6.toString()

Create a new HTML file(stringtask.html) and attempt the 3 questions below:
1.Clean up the following variable to give the clean version in lower case. Using inbuilt methods in the string class
    f_name = “  JOHn  .“ to “john”
2.Slice the below string to get you the resulting sentence:
    sentence_one = “The Dog Breed is German Shepherd” only display “Breed is German”
    sentence_two = “Defeats for the Clinton forces, this was her moment of triumph” only display “Clinton forces”
3.Split the below sentence using a semicolon i.e ; And display length of the result. 
“The lazy dog; ran so fast; it hit the wall.” 


Number Methods 

1.parseInt() - type conversion from string to number - integer
2.parseFloat() - type conversion from string to float

typeof() - returns the data type of a value


OPERATORS 
- symbols or keywords used to perform operations on values or variables

Categories of Operators
1. Arithmetic Operators
2. Comparison Operators
3. Assignment Operators
4. Logical Operators


1. Arithmetic Operators - used to perform arithmetic calculations
 -> + , - , % , // ,/ ,* , **, ++ ,--
++ -> incremental operator  
-- -> decrement operator 

2. Comparison Operators - used to compare values -> return boolean values
-> > < >= , <=, != ,
== -> equality -> compares if two variables are same in value  '5' == 5
=== -> strict equality -> checking for both value and data type 
!== -> strict inequality

3. Assignment Operators - assign values to variables
= , += , -= , /= , %= ,**=

4. Logical Operators 
&& - AND  - returns true if all are true
|| - OR  -  returns true if one is true
! - NOT  - returns the opposite value of a boolean



TYPE CASTING
-the process of converting data from one type to another
1. Implicit conversion - type coercion 
-> JS automtically converts types when needed to
2. Explicit conversion - manual conversion

Polymorphism -> operator overloading -> taking more than form / purpose
+ -> perform the arithemtic operation of summing
+ -> concatenate two strings


Template literals - embedding variables into strings 
- we use back ticks and $


Conditional Statements -> decision makers
types of conditional statements
1. If else - one condition to be met 
2. if , else if ,else -> multiple condtions / options to be met

IN general :
if (condition){
    statement for if
}else{
    statement for else
}


if (condition 1){
    statement for condition 1
}else if (condition 2){
    statement for condition 1
}else if (condition 2){
    statement for condition 3
}
else{
    statement for else
}


1. Write a JS program that checks if a number is even or odd
2. Write a JavaScript program that displays the largest integer among three integers.

Taking user input in JS
1.prompt()  -> simplest way to take user input

N/B: Any data from user input will ALWAYS be a STRING


TASK
1. Create a variable called year and enter the a random year. Check if the year is a leap year or not. A leap year is a year that is divisible by 4  not divisible by 100 or divisible  by 400.

2. Check if the season is Autumn, Winter, Spring or Summer. If the user input is :J
September, October or November, the season is Autumn.
December, January or February, the season is Winter.
March, April or May, the season is Spring
June, July or August, the season is Summer

3. Get user input using prompt(“Enter your age:”). If user is 18 or older , give feedback:'You are old enough to drive' but if not 18 give another feedback stating to wait for the number of years he needs to turn 18.

4. Write a code which can give grades to students according to theirs scores:
80-100, A
70-89, B
60-69, C
50-59, D
0-49, F

TERNARY OPERATOR  - SHORTHAND FOR IF STATEMENTS


ARRAYS IN JS 
-DATA STRUCTURE THAT CAN STORE MULTIPLE ITEMS OF DIFFERENT TYPES
-Equivalent of a list in Python
                Properties  
1. syntax -> []
2. are ordered - access values using index - indexing is zero based 
3. are mutable - alter values
4. arrays can store multiple values of different types  - 

Array Operations
1. accessing values in an array  - use index
2. Updating or modifying values in an array - use index
3. Check for the no of values in an array - length 
4. adding elements to an array  - insert at the end -push()
                                - insert at the begining - unshift()
5. removing elements from an array - remove at the end -pop() -removes last element
                                    - remove at the beginning -shift() - removes first element
6. getting index of a value in an array -> indexOf()
7. revsering an array  reverse()
8. sorting an array - sort()
9. combining two strings - concat

10. slice()
11. splice() - remove elements , add elements and replace elements
12. includes()
13. toString()
14. join() - combine all array values into a single string



a year is a leap year if:
1. The year is divisble by 400
2. The year is divisible by 4 && not divisible by 100


2. OBJECTS
An object is a data structure that stores values in key value pairs
Equivalent to a Python dictionary

Properties of Objects
1. Store data in key-value pairs
2. Values / data is accessed using keys
3. Mutable - can add, delete or modify values
4. Keys are always strings
5. Values can be of any data type


Why use Objects
1. They can store correlated  data
2. They can store complex structured data
3. To model / represent real world entities


Accessing Object properties
properties - the key-value pairs
1. Using dot notation
    -use dot operator (.) followed by the property name
    - only works when property names are valid identifiers (no spaces, no special chars, no numbers)
    -dot notation cannot access a key with spaces
2. Bracket Notation
            - use square brackets with the key as a string
            - can access properties with keys having spaces


"full name"
"full_name"

Object Methods
 .keys() -> gets all keys from your object 
 .values() ->gets all values from an object
 .entries() -> gets key value pairs


Task 
-slide 69 & 70 -> arrays
-slide 75 & 76 -> objects
const userProfile = {
  id: 101,
  name: {
    first: "Brian",
    last: "Letting"
  },
  contact: {
    email: "brian@example.com",
    phones: ["+254700000001", "+254700000002"]
  },
  address: {
    current: {
      city: "Nairobi",
      street: "Westlands Ave",
      postalCode: "00100"
    },
    previous: [
      {
        city: "Eldoret",
        street: "Main Street",
        postalCode: "30100"
      },
      {
        city: "Kisumu",
        street: "Lake View Road",
        postalCode: "40100"
      }
    ]
  },
  preferences: {
    theme: "dark",
    language: "en",
    notifications: {
      email: true,
      sms: false,
      push: ["promotions", "updates"]
    }
  },
  projects: [
    {
      id: 1,
      name: "POS System",
      technologies: ["React", "FastAPI", "PostgreSQL"],
      tasks: [
        { title: "Set up DB", done: true },
        { title: "Design UI", done: false }
      ]
    },
    {
      id: 2,
      name: "Portfolio Website",
      technologies: ["HTML", "CSS", "JavaScript"],
      tasks: [
        { title: "Create About Page", done: true },
        { title: "Deploy to Netlify", done: false }
      ]
    }
  ]
};


Task on the object above
1. access the value -  "Deploy to Netlify"
2. access -> "updates"
3. access -> "Lake View Road"
4. access -> "PostgreSQL"


my_object= [23, “Jane”, 560, [“Lesson”, “Maths”, {“currency” : “KES”}], 987, 76,”John”]

Complex data structure containing arrays and objects (nested)
Arrays - access values using index
Objects - access values using keys


LOOPS 
A block of code that runs repeatedly until a specific condition is met
Types of Loops 
1. For Loop - for
2. While loop - while -loops until a condition is false
3. Do while - do while - executes at least once before checking the loop condition

for (initialization;condition;update){
  //-> your loop
}

initialization -> starting point of the loop
condition -> condition to be met to stop looping
update -> increments or decrements

Loops Task - slide 78 & 79


Using the link HERE , copy the array of JSON objects containing countries with their populations. Display in an object showing how many countries have population between 0 - 50m, 51m - 100m, > 100m as the keys
e.g 
	pops = { “0-50m” : 216, “51-100m” : 16, ”>100m” : 13 }


let array = [ [1,2],[3,4],{"name":"Jane"}]


Functions In JS
A block of code that is meant to execute some instructions or tasks

1. Organization - cleaner code
2. Modularity - split large code into small chunks
3. Reusability - use one function more than once
4. Easier debugging 
5. Improved Readability


syntax of a JS function
//function defintion
function function_name(){

}
e.g function check_even(){

}

//function call
function_name()

// -> 1. Non-parameterized functions - no parameters
      2. Parameterized functions - take some parameters

parameter - placeholder variable in place of actual variable when defining
    a function
argument - the actual value being passed when calling a function

By convetion - functions use return keywords rather than console statements


**Arrow Functions**


**Task** -slide 80
Do task 1 - 20 ... use JS Functions



prods = [[‘omo’,’30kshs’,’300’], [‘milk’,’50kshs’,’200’],[‘bread’,’45kshs’,’359’], [‘coffee’,’5kshs’,’79’]]


Create a new project called Tax Calculator
-index.html
-index.js    